# Copyright 2019, Teus Hagen, license GPLV3
#
# test kit with copy(<cntrl>shiftC)/paste(<cntrl>v) via REPL
# test suite helps to detect hw configuration and software problems
# one by one
# xyz_test is operational test for xyz
# other parts are functional tests for MySense.py wrapper

# RESET LoPy FLASH MEMORY
# MySense will archive the detected configuration:
# which device is connected to which bus (TTL or I2C) and to which TTL socket
# which library should be loaded to drive the device.
# Make sure to choice the right 3V3 or V5 on the connector board for TTL socket.
# Detected configuration is kept in flash memory and
# loaded on warm reboot (deepsleep wakeup)
# Certain values e.g. lora keys and lora package counter is kept in nvs_ram.
# These archived data is cleared/reset as follows:
# delete detected configuration surviving reboots
import os
os.remove('/flash/MySenseConfig.json')
# os.mkfs('/flash')   # remove all MySense firmware
# 
# delete frequently changed status variables
from pycom import nvs_erase_all
nvs_erase_all()
# for item in ['gps','mode','LAT','LON','ALT','info_next','gps_next']: nvs_erase(item)
# delete LoRa saved status data
from network import LoRa
lora = LoRa(mode=LoRa.LORAWAN, region=LoRa.EU868)
lora.nvram_erase()

##### flashed configuraion data
# HW configuration is maintained in config (may come from archive json file in flash mem
# config dict: { (name,abus): value}, value is anything (reminder: json converts tuple to array)
# name: eg dirty, accu(pin), sleep(pin)
# reminder: accu disconnected and sleep is strapped: will auto remove archive in flash
# abus (i2c,ttl): {(meteo,display,dust,gps,udated,calibrate): None or { (name,use,pins,baud,address): value}}

# devices status is maintained in devs dict bus (i2c,ttl): dicts types (meteo,display,dust,gps)
# The devs dict is not archived in flash mem.
# devs dict: bus: i2c or ttl
# each bus has a type a dict:
#   lib (lib class module),
#   index (nr file desc),
#   conf (link to sensormeteo etc config dict),
#   i2c (file descr),
#   ttl (file descr),
#   enabled (can be used, has file descr.)

##### Some SOFTWARE TESTs
# using next tests will give you some first inside in the MySense software
# get serial number of the PyCom controller
from machine import unique_id
import binascii
binascii.hexlify(unique_id()).decode('utf-8')

# test script may write config items in archived config if hardware is found
# to delete archive config from flash mem: use
import ConfigJson
MyConfig = ConfigJson.MyConfig(debug=True) # get ref to archived configuration name space
MyConfig.getConfig()                       # get flashed configuration
MyConfig.config                            # show current archived configuration
# MyConf.clear                             # clear configuration in flash

# check which configuration and attached devices
debug=True
import MySense
MySense.getMyConfig(debug=debug)
# MyConfiguration = MySense.MyConfiguration
# MyConfiguration
# MyDevices = MySense.MyDevices
# MyDevices

# complete MyDevices dictionaries
# initDevices will do: initDisplay(), initDust(), initMeteo(), initNetwork(), DoGPS()
debug=True
import time
MySense.initDevices(debug=debug) # will initialize I2C and TTL devices (GPS on cold start)

# try to get some measurements
debug=True
MySense.DoGPS(debug=debug)
dData = MySense.DoDust(debug=debug)  # dust measurement
dData
mData = MySense.DoMeteo(debug=debug) # meteo measurement
mData
aData = MySense.DoAccu(debug=debug)  # state accu
aData                                # probably 0
aData = 12.5                         # set accu voltage

######## DEVICE TESTs
# next will give youy some test script to test connected hardware components
# try LoRa send info
MySense.SendInfo()                           # send meta data
# send data packet
debug = True
pData = MySense.DoPack(dData,mData,MySense.LocUpdate(),aData=aData, debug=debug)
Network = MySense.MyTypes['network']
Network['lib'].send(pData,port=4)

########## check I2C part
# basic functional test for hardware
import oled_test
import meteo_test

# I2C devices
# detect which devices Display
import whichI2C
I2Cobj = whichI2C.identifyI2C(identify=True,debug=True)

# check basic display init and functional tests
# Display = { 'use': None, 'enabled': False, 'fd': None}
I2Cobj.DISPLAY  # is display connected?
Display = I2Cobj.i2cDisplay
Display
print('Oled %s:' % Display['name'] + ' SDA~>%s, SCL~>%s, Pwr~>%s' % Display['pins'][:3], ' is %d' % I2Cobj.PwrI2C(Display['pins']))

import SSD1306 as DISPLAY # try display
Display['lib'] = DISPLAY.SSD1306_I2C(128,64,Display['i2c'], addr=Display['address'])
Display['lib'].fill(1); Display['lib'].show()
from time import sleep
sleep(1)
Display['lib'].fill(0); Display['lib'].show()
import sys
sys.exit() # reset

# I2C devices Meteo
import whichI2C
I2Cobj = whichI2C.identifyI2C(identify=True,debug=True)

# check basic meteo init and operational functions
# Meteo   = { 'use': None, 'enabled': False, 'fd': None}
I2Cobj.METEO
Meteo = I2Cobj.i2cMeteo
Meteo
print('Meteo %s:' % Meteo['name'] + ' SDA~>%s, SCL~>%s, Pwr~>%s' % Meteo['pins'][:3], ' is %d' % I2Cobj.PwrI2C(Meteo['pins']))

import BME_I2C as BME # try to get meteo data
Meteo['fd'] = BME.BME_I2C(Meteo['i2c'], address=Meteo['address'], debug=True, calibrate={})
# expect bus errors
Meteo['fd'].AQI
Meteo['fd'].temperature
import sys
sys.exit() # reset

########### check and test UART part
import dust_test
import gps_test

# UART devices which device is where connected
import whichUART
UARTobj = whichUART.identifyUART(identify=True,debug=True)
uarts = [None,'gps','dust']

# check dust device functions for MySense
# Dust = { 'use': None, 'enabled': False, 'fd': None}
Dust = UARTobj.devs['dust']
Dust
print('%s UART:' % Dust['name'] + ' SDA~>%s, SCL~>%s, Pwr~>%s' % Dust['pins'][:3], ' is ', UARTobj.PwrTTL(Dust['pins']))

from PMSx003 import PMSx003 as senseDust # get some data from device
sample_time = 60    # 60 seconds sampling for dust
# Dust['uart'] = UARTobj.openUART('dust') this does not work yet?
Dust['uart'] = uarts.index('dust')
Dust['fd'] = senseDust(port=Dust['uart'], debug=True, sample=sample_time, interval=0, pins=Dust['pins'][:2], calibrate={}, explicit=False)
UARTobj.PwrTTL(Dust['pins'],on=True) # power on
Dust['fd'].Normal() # fan on
Dust['fd'].Standby() # fan off
Dust['fd'].getData(debug=True)
UARTobj.PwrTTL(Dust['pins'],on=False)
import sys
sys.exit() # reset

# test with MySense, may see I2C errors
# depends on initDisplay(debug=True), will init display as well
import MySense  # has all functions
MySense.initDust(debug=True)
# ignore I2C bus errors
MySense.DoDust(debug=True)

# UART devices
import whichUART
UARTobj = whichUART.identifyUART(identify=True,debug=True) # all uart devices
uarts = [None,'gps','dust']

# check GPS functions for MySense
# Gps     = { 'use': None, 'enabled': False, 'fd': None}
Gps = UARTobj.devs['gps']
Gps
import GPS_dexter as GPS
print('%s UART:' % Gps['name'] + ' SDA~>%s, SCL~>%s, Pwr~>%s' % Gps['pins'][:3], ' is ', UARTobj.PwrTTL(Gps['pins']))
Gps['uart'] = uarts.index('gps')
Gps['fd'] = GPS.GROVEGPS(port=Gps['uart'],baud=9600,debug=True,pins=Gps['pins'][:2])
UARTobj.PwrTTL(Gps['pins'],on=True)
Gps['fd'].read() # get some valid records
Gps['fd'].date
Gps['fd'].timestamp
Gps['fd'].UpdateRTC()
round(float(Gps['fd'].longitude),5)
round(float(Gps['fd'].latitude),5)
round(float(Gps['fd'].altitude),1)
UARTobj.PwrTTL(Gps['pins'],on=False)

import sys
sys.exit() # reset

# test with MySense
# depends on initDisplay(debug=True)
import MySense
MySense.initGPS(debug=True)

######## LoRa tests
# Network = { 'use': None, 'enabled': False, 'fd': None}
import lora_test
import MySense
MySense.initNetwork(debug=True)
# depends on initNetwork(), initGps() and 'name' in Meteo and Dust dict
# Meteo = {'name':'','enabled': True} Dust = {'name':'None','enabled': True}
# Gps = {'enabled': True}
MySense.SendInfo(3) # send fake info

# to do
Accu    = { 'use': None, 'enabled': False, 'fd': None}

####### power management tests
import MySense
MySense.interval   # show intervals of sendinfo, GPS check, dust, dust sample
MySense.Power      # show powermanagement items
# MySense.Power['display'] = True # use power to display to switch on/off
# MySense.Power['ttl'] = True     # switch power to ttl on before / off after use
# MySense.Power['i2c'] = True     # switch power of I2C bus on/off during sleep
# MySense.Power['sleep'] = True   # switch deepsleep on/off
# TO DO
# deepsleep and config save

# test script may write config items in archived config if hardware is found
# to delete archive config from flash mem: use
import ConfigJson
MyConf = ConfigJson.MyConfig
MyConf.remove

# once tests are working one does not need them in flash anymore
# or use them via atom and 'run'
import os
os.remove('/flash/meteo_test.py')
os.remove('/flash/dust_test.py')
os.remove('/flash/oled_test.py')
os.remove('/flash/lopy_test.py')
os.remove('/flash/gps_test.py')

# clean up LoPy chip
# clear nvs_memory
from machine import nvs_clear
for var in ['modus','LAT','LON','ALT','gps_next','info_next']:
  try: nvs_clear(var)
  except: pass
# clear lora keys
import lora
lora = LORA()
lora.clear
# remove everything from flash mem:
os.mkfs('/flash')
# activate MySense:
# main.py:
import MySense
MySense.runMe()
# suggest to change wifi ssid and password of the wifi AP

# post mortuum debugging variables, may fail if not (yet) set:
from pycom import nvs_get
nvs_get('AlarmWDT')	# point of last mark in loop
nvs_get('AlarmSlp')     # last deepsleep in secs
nvs_get('Vmax')/10.0	# maximum accu voltage
nvs_get('Vmin')/10.0	# minimum accu voltage
nvs_get('Accu')/10.0    # accu voltage if lower 10.8V
nvs_get('count')	# number of measurements
nvs_get('gps')	        # nr of satellites seen
nvs_get('info_next')	# next sec for meta data to be sent
nvs_get('gps_next')	# next sec to check gps location
nvs_get('LON')/1000000.0	# GPS longitude
nvs_get('LAT')/1000000.0	# GPS latitude
nvs_get('ALT')/10.0	# GPS altitude in meters
